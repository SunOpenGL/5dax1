local EXPECTED_URL = "https://raw.githubusercontent.com/SunOpenGL/5dax1/refs/heads/main/2x4"

-- reset validated state ทุกครั้งที่โหลดใหม่
getgenv()._SomtankValidated = {
    ok = false,
    hash = nil
}

local validateKeySystem = newcclosure(function()
    if not getgenv().SOMTANK_KEY then
        return warn("❌ Unauthorized! Must pass key system first.")
    end

    local info = rawget(getgenv(), "_SomtankMarker")
    if type(info) ~= "table"
        or info.url ~= "Somtank_Huntyzombie"
        or typeof(info.token) ~= "Instance"
        or info.sourceUrl ~= EXPECTED_URL
        or not info.hash
        or not info.salt then
        return warn("❌ Invalid loader info or unauthorized source!")
    end

    -- ตรวจสอบ hash + salt
    local ok, source = pcall(function()
        return game:HttpGet(EXPECTED_URL)
    end)
    if not ok or not source then
        return warn("❌ Failed to fetch script source")
    end

    local currentHash = crypt.hash(source .. info.salt, "sha384")
    if currentHash ~= info.hash then
        return warn("❌ Script hash mismatch (salted), possible tampering")
    end

    -- ผ่าน
    getgenv()._SomtankValidated.ok = true
    getgenv()._SomtankValidated.hash = info.hash

    -- ล้าง marker + key ทันที กัน reuse
    pcall(function()
        getgenv()._SomtankMarker = nil
        getgenv().SOMTANK_KEY = false
    end)
end)

-- ✅ เรียก validate
validateKeySystem()

-- ❌ ถ้าไม่ผ่าน หยุดทันที
assert(getgenv()._SomtankValidated.ok, "❌ Unauthorized! Must run through KeySystem first.")

-- ====== โค้ดหลัก ======
print("✅ Verified with salted hash:", getgenv()._SomtankValidated.hash)

game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 100
